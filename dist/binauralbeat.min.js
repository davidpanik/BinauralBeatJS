/*! binauralbeatjs 2014-10-12 */
!function(){var a;a=function(){function a(a,b){var c,d,e,f;this.input=a.createGain(),this.output=a.createGain(),b=null!=b?b:{},this.pitch=null!=(c=b.pitch)?c:440,this.beatRate=null!=(d=b.beats)?d:5,this.waveType=null!=(e=b.waveType)?e:this.constructor.SINE,this.compressNodes=null!=(f=b.compressNodes)?f:!1,this.started=!1,this._createInternalNodes(a),this._routeNodes(),this.setPitch(this.pitch),this.setWaveType(this.waveType)}return a.SINE="sine",a.SQUARE="square",a.SAWTOOTH="sawtooth",a.TRIANGLE="triangle",a.prototype._createInternalNodes=function(a){return this.leftChannel=a.createOscillator(),this.rightChannel=a.createOscillator(),this.channelMerger=a.createChannelMerger(),this.compressor=a.createDynamicsCompressor()},a.prototype._routeNodes=function(){return this.compressNodes?(this.input.connect(this.compressor),this.channelMerger.connect(this.compressor),this.compressor.connect(this.output)):(this.input.connect(this.output),this.channelMerger.connect(this.output))},a.prototype._startOscillators=function(){return this.leftChannel.start(0),this.rightChannel.start(0)},a.prototype._connectOscillators=function(){return this.leftChannel.connect(this.channelMerger,0,0),this.rightChannel.connect(this.channelMerger,0,1)},a.prototype._disconnectOscillators=function(){return this.leftChannel.disconnect(),this.rightChannel.disconnect()},a.prototype._getChannelFrequency=function(a){var b,c;return c=this.beatRate/2,b=0===a?this.pitch-c:this.pitch+c},a.prototype.getChannel=function(a){return 0===a?this.leftChannel:1===a?this.rightChannel:void 0},a.prototype.setPitch=function(a){return this.pitch=a,this.leftChannel.frequency.value=this._getChannelFrequency(0),this.rightChannel.frequency.value=this._getChannelFrequency(1)},a.prototype.setBeatRate=function(a){return this.beatRate=a,this.setPitch(this.pitch)},a.prototype.setWaveType=function(a){return this.waveType=a,this.leftChannel.type=this.rightChannel.type=this.waveType},a.prototype.setPeriodicWave=function(a){return this.leftChannel.setPeriodicWave(a),this.rightChannel.setPeriodicWave(a)},a.prototype.start=function(){return this.started||(this._startOscillators(),this.started=!0),this._connectOscillators()},a.prototype.stop=function(){return this._disconnectOscillators()},a.prototype.connect=function(a){return this.output.connect(a.input?a.input:a)},a.prototype.disconnect=function(){return this.output.disconnect()},a}(),"function"==typeof define&&define.amd?define(function(){return a}):"object"==typeof window&&"object"==typeof window.document&&(window.BinauralBeat=a)}.call(this);